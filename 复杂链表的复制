
大佬解答思路：
//链接：https://www.nowcoder.com/questionTerminal/f836b2c43afc4b35ad6adc41ec941dba
//来源：牛客网

/*
*解题思路：
*1、遍历链表，复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；
*2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;
*3、拆分链表，将链表拆分为原链表和复制后的链表

输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，
另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）


/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode pHead) {
        
          if(pHead ==null) return null;
        //在旧链表钟创建新链表，此时不处理兄弟节点
        RandomListNode newHead = pHead;
        //1、复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；
        while(newHead!=null){
            RandomListNode copyNode = new RandomListNode(newHead.label);
            RandomListNode nextNode = newHead.next;
            newHead.next = copyNode;
            copyNode.next = nextNode;
            newHead = nextNode;
        }
        
        newHead = pHead;
        //2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;
        while(newHead!=null){
            newHead.next.random = newHead.random==null?null:newHead.random.next;
            newHead = newHead.next.next;
        }
        
        //3. 拆分链表，将链表拆分为原链表和复制后的链表
        newHead = pHead;
        RandomListNode pCloneHead = pHead.next;
        while(newHead!=null){
            RandomListNode cloneNode = newHead.next;
            newHead.next = cloneNode.next;
            cloneNode.next = cloneNode.next==null?null:cloneNode.next.next;
            newHead = newHead.next;
        }
        
        return pCloneHead;
    
    }
}
