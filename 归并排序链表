对一个链表进行归并排序， 真的好难

思路：链接：https://www.nowcoder.com/questionTerminal/d75c232a0405427098a8d1627930bea6
来源：牛客网

因为题目要求复杂度为O(nlogn),故可以考虑归并排序的思想。
归并排序的一般步骤为：
1）将待排序数组（链表）取中点并一分为二；
2）递归地对左半部分进行归并排序；
3）递归地对右半部分进行归并排序；
4）将两个半部分进行合并（merge）,得到结果。

所以对应此题目，可以划分为三个小问题：
1）找到链表中点 （快慢指针思路，快指针一次走两步，慢指针一次走一步，快指针在链表末尾时，慢指针恰好在链表中点）；

3）写出mergesort函数，实现上述步骤。

public ListNode sortList(ListNode head){


        if(head == null || head.next == null) return  head;
        //找到链表中点

        ListNode mid = getMid(head);
        ListNode midNext = mid.next;
        mid.next = null;
        return mergesort(sortList(head),sortList(midNext));

    }

//找出中间值
    public ListNode getMid(ListNode head){

        if(head == null || head.next==null) return  head;
        ListNode slow = head;
        ListNode fast = head;

        while (fast.next!=null && fast.next.next!=null){

            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

//排序加合并
    public ListNode mergesort(ListNode head, ListNode mid){
        //递归排序 比较两部分节点的大小进行排序并合并
        //preHead合并的头节点
        ListNode preHead = new ListNode(0), cur1 = head,cur2 = mid,cur = preHead;
        while (cur1 != null && cur2 != null){
            if(cur1.val < cur2.val){
                cur.next = cur1; //新的链表指向新的排序后的值
                cur1 = cur1.next;
            }else {
                cur.next = cur2;
                cur2 = cur2.next;
            }
            cur = cur.next;
        }

//连接排序中的最大节点
        cur.next = cur1==null?cur2:cur1;
        return preHead.next;
    }
