


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        
        //递归 如果当前节点的左子节点不为空，则递归后续遍历
        // 如果当前节点的右子节点不为空，则递归后续遍历
        //输出当前节点
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null) return result;
        
        if(root.left!=null) result.addAll(postorderTraversal(root.left));
        if(root.right!=null) result.addAll(postorderTraversal(root.right));
        
        result.add(root.val);
        
        return result;
    }
    
    
    /**
    链接：https://www.nowcoder.com/questionTerminal/32af374b322342b68460e6fd2641dd1b
来源：牛客网

/**
 *不使用递归解答，这才是最简单而且高效的方法吧。
 *从后往前观察后序遍历后的结果就明白思路了。
 */
    /**public ArrayList<Integer> postorderTraversal(TreeNode root) {
      ArrayList<Integer> list = new ArrayList<>();
      Stack<TreeNode> stack = new Stack<>();
      if (root == null) return list;
      stack.push(root);
      while (!stack.isEmpty()) {
          TreeNode node = stack.pop();
          list.add(0, node.val);//每次插入到头部
          if (node.left != null) stack.push(node.left);
          if (node.right != null) stack.push(node.right);
      }
      return list;
    }**/
  
}



后序遍历
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        
        //链接：https://www.nowcoder.com/questionTerminal/32af374b322342b68460e6fd2641dd1b
//来源：牛客网


// 要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。
    // 如果P不存在左孩子和右孩子，则可以直接访问它；
    // 或者P存在孩子，但是其孩子都已被访问过了，则同样可以直接访问该结点
    // 若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了
    // 每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。
 ArrayList<Integer> list = new ArrayList<>();
        if(root == null)
            return list;
         
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        stack.push(root);
        while(!stack.isEmpty()){
            // 只看栈顶元素，不弹出
            TreeNode cur = stack.peek();
            if((cur.left == null && cur.right == null)
                || (pre != null && (pre == cur.left || pre == cur.right))){
                list.add(cur.val);
                stack.pop();
                pre = cur;
            }
            else{
                if(cur.right != null)
                    stack.push(cur.right);
                if(cur.left != null)
                    stack.push(cur.left);
            }
        }
        return list;
    }
    
    
    /**
    链接：https://www.nowcoder.com/questionTerminal/32af374b322342b68460e6fd2641dd1b
来源：牛客网

/**
 *不使用递归解答，这才是最简单而且高效的方法吧。
 *从后往前观察后序遍历后的结果就明白思路了。
 */
    /**public ArrayList<Integer> postorderTraversal(TreeNode root) {
      ArrayList<Integer> list = new ArrayList<>();
      Stack<TreeNode> stack = new Stack<>();
      if (root == null) return list;
      stack.push(root);
      while (!stack.isEmpty()) {
          TreeNode node = stack.pop();
          list.add(0, node.val);//每次插入到头部
          if (node.left != null) stack.push(node.left);
          if (node.right != null) stack.push(node.right);
      }
      return list;
    }**/
  
}
