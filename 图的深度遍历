


package graf;

import java.util.ArrayList;
import java.util.Arrays;

public class GrafDFS {

    private ArrayList<String> vetexList; //节点
    private int[][] edges; //存储图对应的邻接矩阵

    private int numOfEdges;//存储边的数目

    //定义一个boolean类型的数组记录某个节点是否被访问
    private boolean isVisit[];
    public static void main(String[] args) {

        int n = 5;
        String[] vertexValue = {"A","B","C","D","E"};

        //创建图对象
        GrafDFS graf = new GrafDFS(n);
        //循环添加节点
        for (String str:vertexValue){
            graf.insert(str);
        }
        //添加边
        //A-B A-C B-C B-D B-E
        graf.addEdges(0,1,1);
        graf.addEdges(0,2,1);
        graf.addEdges(1,2,1);
        graf.addEdges(1,3,1);
        graf.addEdges(1,4,1);

        //显示
        graf.showGraf();
        System.out.println("深度遍历");
        graf.dfs();
    }


    /**
     * 如果存在，就返回对应的下标；否则返回-1
     * @param n
     */
    public GrafDFS(int n){
        //构造器进行初始化矩阵和vetexList列表
        edges = new int[n][n];
        vetexList = new ArrayList<>(n);
        numOfEdges = 0;
        isVisit = new boolean[n];
    }


    /**
     * 根据当前邻接节点下标返回下一个邻接节点
     * @param v1
     * @param v2
     * @return  A-B 返回A-C
     */
    public int getNextNeighborByvetex(int v1, int v2){
        for (int j=v2+1;j<vetexList.size();j++){

            if(edges[v1][j]>0)
                return j;
        }

        return -1;
    }

    /**
     * 获得第一个当前节点的邻接节点的下标
     * @param index
     * @return A-B 返回B的下标
     */
    public int getFirstNeighborByIndex(int index){

        for(int j=0;j< vetexList.size();j++){
            if(edges[index][j]>0){
                return j;
            }
        }
        return -1;
    }

    /**
     *
     * @param isVisit 标注已访问
     * @param i 访问第0个节点
     */
    public void dfs(boolean[] isVisit,int i){
        System.out.print(getValueByIndex(i)+"->");
        //标注已经被访问
        isVisit[i] = true;
        //查找i的邻接节点w
        int w = getFirstNeighborByIndex(i);
        //w存在
        while (w!=-1){
            //判断有没有被放过
            if(!isVisit[w]){
                dfs(isVisit,w);
            }

            //如果w已经被访问过
            w = getNextNeighborByvetex(i,w);

        }

    }

    /**
     * 访问第1个，2个，3个
     */
    public void dfs(){
        for(int i=0;i< getNumOfVertex();i++){
            if(!isVisit[i]){
                dfs(isVisit,i);
            }
        }
    }


    //插入节点
    public void insert(String vertex){
        vetexList.add(vertex);
    }

    //添加边 矩阵中有值的进行添加wweight

    /**
     *
     * @param i  表示第i个定点的小标  A 0
     * @param j  表示第J个定点的小标  B 1
     * @param weight 边的权值
     */
    public void addEdges(int i, int j, int weight){

        edges[i][j] = weight;
        //无相图
        edges[j][i] = weight;
        numOfEdges++;//边的数量++
    }

    //图中常用的方法
    //返回节点的个数
    public int getNumOfVertex(){

        return vetexList.size();
    }
    //获得边数
    public int getEdges(){

        return numOfEdges;
    }

    //获得下标对应的数据（1）-》A 2->B 3->C
    public String getValueByIndex(int i){

        return vetexList.get(i);
    }

    //返回i,j的权值
    public int getWeight(int i,int j){
        return edges[i][j];
    }

    //显示图对应的矩阵
    public  void showGraf(){
        for (int []link:edges){
            System.out.println(Arrays.toString(link));
        }
    }
}
