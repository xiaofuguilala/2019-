
递归
 public ArrayList<Integer> preorderTraversal(TreeNode root) {
        //递归
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(root==null) return result;
        result.add(root.val);
        if(root.left!=null)
            result.addAll(preorderTraversal(root.left));
         if(root.right!=null)
            result.addAll(preorderTraversal(root.right));
        
        return result;
    }
    
    //思路非常巧妙，先根再左再右，先压入右边的节点，再压入左边的节点，保证弹出左边的节点先
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        //非递归  先遍历根节点，再是左节点，再是右节点
        //利用队列，先进先出
         ArrayList<Integer> result = new ArrayList<>();
        if(root == null) return result;
       
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(stack.size()>0){
            //返回第一个元素不删除
            TreeNode node = stack.pop();
            result.add(node.val);
            if(node.right!=null) stack.push(node.right);
            if(node.left!=null) stack.push(node.left);
        }
        
      return result;
    }
